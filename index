#! /usr/bin/perl
#   Builds a correlation file for a supplied set of text files

#   Load dictionary words so we can ignore them
open (DICT, "/usr/share/dict/words") || die "can't open words $!";
while (<DICT>) {
    chop;
    $dict {$_} = 1 unless /^[A-Z]/;
}
close (DICT);

#   Load cache list so we can ignore that
if (open (CACHE, "index.cache")) {
    while (<CACHE>) {
        chop;
        $dict {$_} = 1;
    }
    close (CACHE);
}
while (<>) {
    next if /^\./;
    #   Remove hyperlinks
    while (/\[(http(s)?:\/\/[^ ]+) ([^\]]+)\]/) {
        $_ = $`.$2.$';
    }
    #   Split line into alphabetic words and track word pairs
    undef ($prev);
    while (/([\w'\-]+)/) {
        $_ = $';
        $word = $1;

        #   Ignore 1 or 2-letter words
        if (length ($word) < 3) {
            undef ($prev);
        }
        else {
            #   Collect both the word, and the word pair
            $hits {$word}++;
            $hits {"$prev $word"}++ if $prev;
            $prev = $word;
        }
    }
}

#   Merge "These" into "these"
foreach $term (keys %hits) {
    if ($term =~ /^[A-Z]/) {
        $lower = lc ($term);
        if ($hits {$lower}) {
            $hits {$lower} += $hits {$term};
            undef ($hits {$term});
        }
    }
}

#   Kill words and word pairs where either word has more than
#   20 hits or is in the dictionary
foreach $term (keys %hits) {
    if ($term =~ / /) {
        $first = $`;
        $second = $';
        if ($hits {$first} > 20 || $dict {$first}
        ||  $hits {$second} > 20 || $dict {$second}
        ||  $dict {$term}) {
            undef ($hits {$term});
        }
    }
    elsif ($dict {$term} || $hits {$term} > 20) {
        undef ($hits {$term});
    }
}

foreach $term (keys %hits) {
    if ($hits {$term} > 1 && $hits {$term} < 20) {
         print "$term\n";
    }
}
